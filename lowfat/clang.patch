diff --git a/include/clang/Basic/Sanitizers.def b/include/clang/Basic/Sanitizers.def
index c81273e..c8df64c 100644
--- a/include/clang/Basic/Sanitizers.def
+++ b/include/clang/Basic/Sanitizers.def
@@ -37,6 +37,8 @@
 #define SANITIZER_GROUP(NAME, ID, ALIAS)
 #endif
 
+// LowFat
+SANITIZER("lowfat", LowFat)
 
 // AddressSanitizer
 SANITIZER("address", Address)
diff --git a/include/clang/Driver/SanitizerArgs.h b/include/clang/Driver/SanitizerArgs.h
index 6206680..f005855 100644
--- a/include/clang/Driver/SanitizerArgs.h
+++ b/include/clang/Driver/SanitizerArgs.h
@@ -46,6 +46,7 @@ class SanitizerArgs {
   /// Parses the sanitizer arguments from an argument list.
   SanitizerArgs(const ToolChain &TC, const llvm::opt::ArgList &Args);
 
+  bool needsLowFatRT() const { return Sanitizers.has(SanitizerKind::LowFat); }
   bool needsAsanRt() const { return Sanitizers.has(SanitizerKind::Address); }
   bool needsSharedAsanRt() const { return AsanSharedRuntime; }
   bool needsTsanRt() const { return Sanitizers.has(SanitizerKind::Thread); }
diff --git a/lib/Basic/Targets.cpp b/lib/Basic/Targets.cpp
index 1a95ff2..05bc16e 100644
--- a/lib/Basic/Targets.cpp
+++ b/lib/Basic/Targets.cpp
@@ -3002,6 +3002,8 @@ bool X86TargetInfo::setFPMath(StringRef Name) {
   return false;
 }
 
+#include "lowfat_config.h"
+
 bool X86TargetInfo::initFeatureMap(
     llvm::StringMap<bool> &Features, DiagnosticsEngine &Diags, StringRef CPU,
     const std::vector<std::string> &FeaturesVec) const {
@@ -3010,6 +3012,14 @@ bool X86TargetInfo::initFeatureMap(
   if (getTriple().getArch() == llvm::Triple::x86_64)
     setFeatureEnabledImpl(Features, "sse2", true);
 
+  // LowFat assumes -mbmi -mbmi2 -mlzcnt so just enable it here:
+  // FIXME: better way of doing this?
+#ifndef _LOWFAT_LEGACY
+  setFeatureEnabledImpl(Features, "lzcnt", true);
+  setFeatureEnabledImpl(Features, "bmi", true);
+  setFeatureEnabledImpl(Features, "bmi2", true);
+#endif
+
   const CPUKind Kind = getCPUKind(CPU);
 
   // Enable X87 for all X86 processors but Lakemont.
diff --git a/lib/CodeGen/BackendUtil.cpp b/lib/CodeGen/BackendUtil.cpp
index d2ce6ea..d3cab3a 100644
--- a/lib/CodeGen/BackendUtil.cpp
+++ b/lib/CodeGen/BackendUtil.cpp
@@ -255,6 +255,13 @@ static void addEfficiencySanitizerPass(const PassManagerBuilder &Builder,
   PM.add(createEfficiencySanitizerPass(Opts));
 }
 
+static void addLowFatPass(const PassManagerBuilder &Builder,
+                          legacy::PassManagerBase &PM) {
+  PM.add(createPromoteMemoryToRegisterPass());  // Currently assumed.
+  PM.add(createLowFatPass());
+  PM.add(createFunctionInliningPass());         // Inline LowFat instrumentation
+}
+
 static TargetLibraryInfoImpl *createTLII(llvm::Triple &TargetTriple,
                                          const CodeGenOptions &CodeGenOpts) {
   TargetLibraryInfoImpl *TLII = new TargetLibraryInfoImpl(TargetTriple);
@@ -416,6 +423,13 @@ void EmitAssemblyHelper::CreatePasses(legacy::PassManager &MPM,
                            addEfficiencySanitizerPass);
   }
 
+  if (LangOpts.Sanitize.has(SanitizerKind::LowFat)) {
+    PMBuilder.addExtension(PassManagerBuilder::EP_ScalarOptimizerLate,
+                           addLowFatPass);
+    PMBuilder.addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,
+                           addLowFatPass);
+  }
+
   // Set up the per-function pass manager.
   FPM.add(new TargetLibraryInfoWrapperPass(*TLII));
   if (CodeGenOpts.VerifyModule)
@@ -501,7 +515,10 @@ void EmitAssemblyHelper::CreateTargetMachine(bool MustCreateTM) {
       .Case("kernel", llvm::CodeModel::Kernel)
       .Case("medium", llvm::CodeModel::Medium)
       .Case("large", llvm::CodeModel::Large)
-      .Case("default", llvm::CodeModel::Default)
+      .Case("default", (LangOpts.Sanitize.has(SanitizerKind::LowFat)?
+                        (CodeGenOpts.RelocationModel == "pic"?
+                         llvm::CodeModel::Large : llvm::CodeModel::Medium) :
+                        llvm::CodeModel::Default))
       .Default(~0u);
   assert(CodeModel != ~0u && "invalid code model!");
   llvm::CodeModel::Model CM = static_cast<llvm::CodeModel::Model>(CodeModel);
diff --git a/lib/Driver/ToolChain.cpp b/lib/Driver/ToolChain.cpp
index 6adc038..55e62b8 100644
--- a/lib/Driver/ToolChain.cpp
+++ b/lib/Driver/ToolChain.cpp
@@ -690,6 +690,8 @@ SanitizerMask ToolChain::getSupportedSanitizers() const {
       getTriple().getArch() == llvm::Triple::wasm32 ||
       getTriple().getArch() == llvm::Triple::wasm64)
     Res |= CFIICall;
+  if (getTriple().getArch() == llvm::Triple::x86_64)
+    Res |= LowFat;
   return Res;
 }
 
diff --git a/lib/Driver/Tools.cpp b/lib/Driver/Tools.cpp
index 3c3d453..7100d33 100644
--- a/lib/Driver/Tools.cpp
+++ b/lib/Driver/Tools.cpp
@@ -3334,6 +3334,8 @@ collectSanitizerRuntimes(const ToolChain &TC, const ArgList &Args,
   }
   if (SanArgs.needsEsanRt())
     StaticRuntimes.push_back("esan");
+  if (SanArgs.needsLowFatRT())
+    StaticRuntimes.push_back("lowfat");
 }
 
 // Should be called before we add system libraries (C++ ABI, libstdc++/libc++,
@@ -3371,6 +3373,17 @@ static bool addSanitizerRuntimes(const ToolChain &TC, const ArgList &Args,
   if (SanArgs.hasCrossDsoCfi() && !AddExportDynamic)
     CmdArgs.push_back("-export-dynamic-symbol=__cfi_check");
 
+  if (SanArgs.needsLowFatRT()) {
+    // Use the special LowFat linker script for globals:
+    CmdArgs.push_back("-T");
+    CmdArgs.push_back("LowFat/lowfat.ld");
+    // This works around a bug (?) where ld defaults to 2MB page sizes for
+    // custom sections, leading to very large executables.  The following
+    // forces 4KB page sizes:
+    CmdArgs.push_back("-z");
+    CmdArgs.push_back("max-page-size=0x1000");
+  }
+
   return !StaticRuntimes.empty();
 }
 
